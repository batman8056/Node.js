Where did my data go?
*********************
Backend storage some where it is storing.

Type of Databases?
------------------
1.SQL DB (structure query language) - stored a data in table rows and columns anaother advantage is relational database
                                      manipulating and retrieving data in databases.
                                      Type of appliaction (MySQL, SQL Server, MS Access, Oracle, Sybase, Informix, Postgres)
2.Non-SQL DB (non-structure query language) - store a data what ever we want another advantage is we can modify data our flexibility.
                                      Type of appliaction (Apache, MongoDB, Redis, Amazon Dynomo DB, Azure Cosmos DB,)

CRUD (Create Read, Update, Destroy)

onine playground for SQL-> https://sqliteonline.com/

SQL Commends: CREATE Table and INSERT Data:-
------------------------------------------

CREATE Table:-(create)
--------------
CREATE TABLE Employees (
    EmployeeID INT PRIMARY KEY,
    FirstName VARCHAR(50),
    LastName VARCHAR(50),
    DateOfBirth DATE,
    Position VARCHAR(50)
);

CREATE TABLE product (
    id int NOT NULL ,
    name string,
    price MONEY,
    PRIMARY KEY (id)
);

INSERT Data into table:-(update)
------------------------
INSERT INTO Employees (CustomerName, ContactName, Address, City, PostalCode, Country)
VALUES ('Cardinal', 'Tom B. Erichsen', 'Skagen 21', 'Stavanger', '4006', 'Norway');

INSERT INTO product (id, name, price) VALUES ('1', 'Manish', '5.2');

READ the data from table:-(Read)
--------------------------
SELECT * FROM Employees 

SELECT * FROM product 
SELECT name, price FROM product
SELECT * FROM product WHERE name='Manish';

Update single value and add column the table from database:-(update)
------------------------------------------------------------

UPDATE product  SET price = 3 WHERE id= 3;

ALTER TABLE product ADD quality string;

UPDATE product  SET quality = 'good' WHERE id= 1;

ALTER TABLE product RENAME COLUMN name TO product;

Destroy row of the table and table from database:-(delete)
-------------------------------------------------------------

DELETE FROM Employees WHERE FirstName='Alfreds Futterkiste';

DELETE FROM product WHERE id=2;

DELETE FROM product;

Understanding SQL Relationships, foregn key and inner joins:-
--------------------------------------------------------------

Relationships:-
--------------

CREATE TABLE orders (
    id INT NOT NULL,
    order_number INT,
    customer_id INT,
    product_id INT,
    PRIMARY KEY (id),
    FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
    FOREIGN KEY (product_id) REFERENCES product(product_id)
);

INSERT INTO orders (id, order_number, customer_id, product_id) VALUES (1,121,2,1);
INSERT INTO orders (id, order_number, customer_id, product_id) VALUES (2,122,1,2);
INSERT INTO orders (id, order_number, customer_id, product_id) VALUES (3,123,3,3);

inner join:-
------------

SELECT orders.order_number, customer.FirstName, customer.LastName
FROM orders
INNER JOIN customer ON orders.customer_id = customer.customer_id;

SELECT orders.order_number, product.name, product.price
FROM orders
INNER JOIN product ON orders.product_id = product.product_id;

--------------------------------
Refer a basic SQL query folder |
--------------------------------

Introduction PostgreSQL:-
************************
->an open-source relational database system that's used to store and organize data. 
It's known for its reliability, flexibility, and support for a wide range of data types.

->uses Structured Query Language (SQL) for queries and transactions. 
It supports both relational (SQL) and non-relational (JSON) data types. 

->Non-blocking PostgreSQL client for Node.js. Pure JavaScript and optional native libpq bindings.

Postgres Table type & keywords:-
-------------------------------

keywords, Primary Key and datat ypes:-

https://www.postgresql.org/docs/current/datatype.html

Using pgAdmin:-
---------------
create a database create table inside pgadmin:-
READ Data in postgresql Database

username postgres
password postgres
--------------------------------
refer world capital quiz folder |
--------------------------------

--------------------------
refer postgre read folder |
--------------------------

Querying Data:-
**************

How to use SELECT, WHERE and LIKE in PostgreSQL:-


SELECT multiple column:-
SELECT country, rice_production FROM world_food

WHERE Equal:-
SELECT rice_production FROM world_food WHERE rice_production=13.98;

WHERE greater then Equal value:-
SELECT rice_production FROM world_food WHERE rice_production>=9;
SELECT wheat_production FROM world_food WHERE wheat_production>=20;

WHERE LIKE simary united getting:-
SELECT country FROM world_food WHERE country LIKE 'U'||'%';//start in u
SELECT country FROM world_food WHERE country LIKE '%'||'a';//ending in a

NOT NULL -missing or empty values are not allowed, Attempt to add NULL Will result in an error.

UNIQUE - Value cannot be repeated in the table. No other value stored can be the same (avoid duplicates).

how to use insert in postgreSQL and in Node:-

INSERT INTO visit_country (id, country_code) VALUES (1,IN);

CREATE TABLE countries(
	id serial PRIMARY KEY NOT NULL,
	country_code CHAR(2),
	country_name VARCHAR(100)
);

Syntax:-          
query(SQL commend, [values]);

db.query(
    "SELECT country_code FROM countries WHERE country_name = $1",//placeholder allow our expresion in sql
    [input]
  );
db.query("INSERT INTO visit_country (country_code) VALUES ($1)", [
      countryCode,
    ]);
    
------------------------------
refer Travel Tracker Project |
------------------------------

how to use forgin keys and inner joins in Relationships of two tables.
*****************************************************************
->A primary key is a unique identifier for each row in a table, 
while a foreign key is a column that links to a primary key in another table.

online draw tool -https://app.diagrams.net/

One to One Relationships:-
------------------------
->like student table to contact_details table Relationship one to one inner relational

example:-
CREATE TABLE student (
  id SERIAL PRIMARY KEY,
  first_name TEXT,
  last_name TEXT
);

-- One to One --
CREATE TABLE contact_detail (
  id INTEGER REFERENCES student(id) UNIQUE,
  tel TEXT,
  address TEXT
);

-- Data --
INSERT INTO student (first_name, last_name)
VALUES ('Angela', 'Yu');
INSERT INTO contact_detail (id, tel, address)
VALUES (1, '+123456789', '123 App Brewery Road');

-- Join --
SELECT * 
FROM student
JOIN contact_detail
ON student.id = contact_detail.id

one to many Relationships:-
--------------------------
->Use REFERENCES to link tables in one to many Relationship with foregin key.

example:-
CREATE TABLE homework_submission (
  id SERIAL PRIMARY KEY,
  mark INTEGER,
  student_id INTEGER REFERENCES student(id)
);

-- Data --
INSERT INTO homework_submission (mark, student_id)
VALUES (98, 1), (87, 1), (88, 1)

-- Join one to many --
SELECT *
FROM student
JOIN homework_submission
ON student.id = homework_submission.student_id

-- Join we can select particular columns--
SELECT student.id, first_name, last_name, mark
FROM student
JOIN homework_submission
ON student.id = student_id

many to many Relationships:-
--------------------------
-> one or more table connect to one or more table we called as many to many

example:-
CREATE TABLE class (
  id SERIAL PRIMARY KEY,
  title VARCHAR(45)
);

CREATE TABLE enrollment (
  student_id INTEGER REFERENCES student(id),
  class_id INTEGER REFERENCES class(id),
  PRIMARY KEY (student_id, class_id)
);

-- Data --
INSERT INTO student (first_name, last_name)
VALUES ('Jack', 'Bauer');

INSERT INTO class (title)
VALUES ('English Literature'), ('Maths'), ('Physics');

INSERT INTO enrollment (student_id, class_id ) VALUES (1, 1), (1, 2);
INSERT INTO enrollment (student_id ,class_id) VALUES (2, 2), (2, 3);

-- Join --
SELECT *
FROM enrollment 
JOIN student ON student.id = enrollment.student_id
JOIN class ON class.id = enrollment.class_id;

-- Join we can select particular columns using aliases(AS) make queries shorter--
SELECT student.id AS id, first_name, last_name, title
FROM enrollment 
JOIN student ON student.id = enrollment.student_id
JOIN class ON class.id = enrollment.class_id;

-- EXERCISE SOLUTION AND SETUP --
-----------------------------------
DROP TABLE IF EXISTS visited_countries, users;

CREATE TABLE users(
id SERIAL PRIMARY KEY,
name VARCHAR(15) UNIQUE NOT NULL,
color VARCHAR(15)
);

CREATE TABLE visited_countries(
id SERIAL PRIMARY KEY, 
country_code CHAR(2) NOT NULL,
user_id INTEGER REFERENCES users(id)
);

INSERT INTO users (name, color)
VALUES ('Angela', 'teal'), ('Jack', 'powderblue');

INSERT INTO visited_countries (country_code, user_id)
VALUES ('FR', 1), ('GB', 1), ('CA', 2), ('FR', 2 );

SELECT *
FROM visited_countries
JOIN users
ON users.id = user_id;

-------------------------------------
refer Family Travel Tracker Project |
-------------------------------------

Update and delete:-(ALTER, DROP, UPDATE, DELETE)
-----------------

ALTER TABLE <TABLE TO ALTER>
  <DO SOMETHING>

ALTER TABLE student
  RENAME TO user;

ALTER TABLE user
  ALTER COLUMN first_name TYPE VARCHAR(20);
  
ALTER TABLE contact_details
  ADD email TEXT; 

ALTER TABLE visit_country
  ADD UNIQUE(user_id, country_code); 

DROP TABLE IF EXISTS visit_country, users;

UPDATE users SET name = 'manish' WHERE id = 7;

SELECT * FROM users ORDER BY id ASC;//forword

SELECT * FROM users ORDER BY name DESC;//backword

DELETE FROM users WHERE name = radio;
--------------------------------
Refer Permalist Project folder |
--------------------------------
