What is API?
***********
->Application programming interface (API)

->interface between two diffrent softwar

Diffrent type of API diffrent type of architecture rule
1.GrapQL
2.{SOAP}
3.{REST:API}
4.gRPC

What is REST API?
------------------
->it is a set of rules

->important rule is HTTP protocal like get,post,put,patch,delete

Formatting API Request?
-----------------------

client request |  your server | Someone else's server
-----------------------------------------------------
       req/res       req/res         req/res
----<------------>private API<----->Public API<------->



BaseURL/Endpoints-
------------------
https://google.com/entertainment

example:-
GET https://bored-api.appbrewery.com/random

{
    "activity": "Volunteer at your local food pantry",
    "availability": 0.1,
    "type": "charity",
    "participants": 1,
    "price": 0,
    "accessibility": "Few to no challenges",
    "duration": "hours",
    "kidFriendly": true,
    "link": "",
    "key": "1878070"
}

Path Parameter-
--------------

->we pass path param is unique identification perticular data only we will get.

GET https://bored-api.appbrewery.com/random/{path-parameter}
https://bored-api.appbrewery.com/activity/3943506


Query Parameters-
---------------
->we are passing Query param for filter the type=education then it will be showed type=education 
presented data only or multiple query we passed based on that it will geting the details.

GET https://bored-api.appbrewery.com/random? query1=value&query2=value
https://bored-api.appbrewery.com/filter?type=charity&participants= 1


Introduction to JSON:-
*********************

what is json?
------------
->JavaScript Object Notation, is a lightweight, text-based format for storing and exchanging data.
->JSON is based on a subset of the JavaScript Programming Language.

Human-readable: JSON is easy for humans to read and understand. 
Machine-parsable: JSON is easy for computers to understand. 
Language-independent: JSON is independent of any programming language.

->Objects collection of name-value pairs, defined within left ({) and right (}) braces.
->Arrays ordered collection of values, defined within left ([) and right (]) brackets.

JS Object:
const data = {
    activity: "Volunteer at your local food pantry",
    availability: 0.1,
    type: "charity",
    spend time: [
        {
            duration: "hours",
            duration: "minutes"
        }
    ]
    key: "1878071"
}

JSON:
{
    "activity": "Volunteer at your local food pantry",
    "availability": 0.1,
    "type": "charity",
    "spend time": [
        {
            "duration": "hours",
            "duration": "minutes"
        },
        {
            "duration": "hours",
            "duration": "minutes"
        },
    ]
    "key": "1878072"
}

JS Object --> JSON
const jsonData = JSON.stringify(data);
JSON --> JS Object
const data = JSON.parse(jsonData);

refer JSON Folder

Making Server-Side API Request with Axios:-
******************************************

->Making request from your server using Node and Axios.


 your server | Someone else's server
------------------------------------
   req/res            req/res
    <----->Public API<------->

Axios:-
-----
Axios is handling server side request.

->Axios is a third-party library that can be installed via a package manager.
->Axios supports older browsers.
->Axios automatically transforms errors
->Axios automatically parses JSON
->Axios has a built-in mechanism for canceling requests
->Axios has a timeout option
->Axios uses the data property for sending data in a POST request.
->Axios automatically transforms the server's response data.

Random data:-
https://bored-api.appbrewery.com/random

{
    "activity": "Start a collection",
    "availability": 0.5,
    "type": "recreational",
    "participants": 1,
    "price": 0,
    "accessibility": "Few to no challenges",
    "duration": "hours",
    "kidFriendly": true,
    "link": "",
    "key": "1718657"
}

API Authentication:-
*******************
->Authonticating or Authorization yourself with the API provider.

0. No authontication
1. Basic authontication
2. API key authontication
3. Token Based authontication

No authontication
----------------

->Based on ip address how many api request they can make it, we set limites.
->Public API No Authontication

Basic authontication
--------------------

->Is required for some endpoints. use your usename and password for users
->Base64 Encodeing(word->Octes->bits->word) we can pass header

API key Authorization:-
---------------------
Authorization               |    Authontication

*client that allow               *username and password
to use your service
using API Key to Authonticating


->An API Key is requred to Authorize certain endpoints. Use the API key obtained from the /generate-api-key endpoint.
->Generates a new API key. https://secrets-api.appbrewery.com/generate-api-key

{
    "apiKey": "b9c730e2-6c72-40f5-81a9-2e73dfb8d673"
}

then we need to authonticate

GET/filter
->Returns a random secret with a particular embarrassment score or higher. API key authentication is required.

https://secrets-api.appbrewery.com/filter?score=5&apiKey=b886c845-9989-43aa-8c60-ea4a669bb587

Token Based authontication:
--------------------------

->when we give username and password it will provide token in oauth 
->then we provide that token for access Application it allow to api access.

->Bearer Token Authentication is required for some endpoints. 
Use your username and password to get a token obtained from the /get-auth-token endpoint.

refer postman collection in API Authentication Folder

example code also


Rest APIs:-
************

->API is fully RestAPI (Representational State Transfer Application Programming Interface).
->Making GET, POST, PUT, PATCH, and DELETE API Requests.


app.get("/noAuth", async (req, res) => {
  try{
    const result = await axios.get(API_URL+'/random')
    res.render('index.ejs',{content: JSON.stringify(result.data)});
  } catch (error) {
    res.status(404).send(error.message);
  }
});


app.post("/", async (req, res) => {
  try{
    const result = await axios.post(API_URL+'/random',body,config)
    res.render('index.ejs',{content: JSON.stringify(result.data)});
  } catch (error) {
    res.status(404).send(error.message);
  }
});

await axios.put(API_URL,body,config)

await axios.patch(API_URL,body,config)

await axios.delete(API_URL,config)

-------------------------
refer REST APIs Folder  |
-------------------------

Secrets Project:-
****************
->Deepest, Darkest Secrets Revealed Anonymously.
->Using Secrets endpoint to Revealed
------------------------------
refer Secrets Project folder |
------------------------------


